{"version":3,"sources":["components/Columns.js","components/Table.js","components/NavBar.js","utils/API.js","components/Data.js","components/Body.js","components/Wrapper.js","components/Heading.js","App.js","serviceWorker.js","index.js"],"names":["Columns","filteredUsers","undefined","name","map","login","picture","phone","email","dob","key","uuid","data-th","src","medium","alt","first","last","className","href","target","date","split","Table","headings","id","columnName","columnWidth","style","NavBar","searchEmployees","type","placeholder","aria-label","onChange","event","axios","get","Data","state","users","filter","value","filteredList","person","Object","values","join","toLowerCase","indexOf","setState","API","then","randomUsers","data","results","this","Component","Body","Wrapper","children","Heading","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.121ccc87.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Columns({filteredUsers}) {\r\n\r\n    return (\r\n        <tbody>\r\n          {filteredUsers[0] !== undefined && filteredUsers[0].name !== undefined ? (\r\n            filteredUsers.map(({ login, name, picture, phone, email, dob }) => {\r\n              return (\r\n                <tr key={login.uuid}>\r\n                  <td data-th=\"Image\">\r\n                    <img\r\n                      src={picture.medium}\r\n                      alt={\"profile image for \" + name.first + \" \" + name.last}\r\n                      className=\"img-responsive\"\r\n                    />\r\n                  </td>\r\n                  <td data-th=\"Name\">\r\n                        {name.first} {name.last}    \r\n                  </td>\r\n                  <td data-th=\"Phone\">\r\n                    {phone}\r\n                  </td>\r\n                  <td data-th=\"Email\">\r\n                    <a href={\"mailto:\" + email} target=\"__blank\">\r\n                      {email}\r\n                    </a>\r\n                  </td>\r\n                  <td data-th=\"Birthday\">\r\n                     {dob.date.split(\"T\")[0]}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </tbody>\r\n      );\r\n\r\n}\r\n\r\nexport default Columns;","import React from \"react\";\r\nimport Columns from \"./Columns\";\r\n\r\nfunction Table({headings, filteredUsers}) {\r\n    return (\r\n      <div className=\"table\">\r\n        <table\r\n          id=\"table\"\r\n          className=\"table\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              {headings.map(({columnName, columnWidth}) => {\r\n                return (\r\n                  <th\r\n                    className=\"col\"\r\n                    key={columnName}\r\n                    style={{columnWidth}}\r\n                  >\r\n                    {columnName}\r\n                  </th>\r\n                );\r\n              })}\r\n            </tr>\r\n          </thead>\r\n          <Columns filteredUsers={filteredUsers} />\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Table;\r\n\r\n","import React from \"react\";\r\n\r\nfunction NavBar({searchEmployees}) {\r\n    return (\r\n        <nav className=\"navbar\">\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\r\n                <div className=\"searchComponent\">\r\n                    <form className=\"form-inline mr-auto\">\r\n                        <input \r\n                            className=\"form-control\" \r\n                            type=\"text\" \r\n                            placeholder=\"Search by Name\" \r\n                            aria-label=\"Search by Name\"\r\n                            onChange={ event => searchEmployees(event)}\r\n                        />\r\n                        <button className=\"btn\" type=\"submit\">\r\n                            Search \r\n                        </button>\r\n                    </form>\r\n            </div>\r\n                </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default NavBar;\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\nexport default {\r\n    // Gets all users\r\n    callUsers: function() {\r\n      return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n  };","import React, { Component } from 'react';\r\nimport Table from \"./Table\";\r\nimport NavBar from \"./NavBar\";\r\nimport API from \"../utils/API\";\r\n\r\n\r\nclass Data extends Component {\r\n\r\n    // The constructor is a method thatâ€™s automatically called during the creation of an object from a class. \r\n    // It can handle your initial setup stuff like defaulting some properties of the object, or sanity checking the arguments that were passed in. \r\n    // Simply put, the constructor aids in constructing things.\r\n    // Source: https://www.digitalocean.com/community/tutorials/react-constructors-with-react-components\r\n    constructor() {\r\n        // super() will calls the constructor of its parent class. This is required when you need to access some variables from the parent class.\r\n        super();\r\n        this.state = {\r\n            users: [{}],\r\n            filteredUsers: [{}],\r\n            headings: [\r\n                {columnName: \"Image\", columnWidth: \"20%\"},\r\n                {columnName: \"Name\", columnWidth: \"20%\"},\r\n                {columnName: \"Phone\", columnWidth: \"20%\"},\r\n                {columnName: \"Email\", columnWidth: \"20%\"},\r\n                {columnName: \"Birth Day\", columnWidth: \"20%\"}\r\n            ],\r\n\r\n            searchEmployees: event => {\r\n                const filter = event.target.value;\r\n                const filteredList = this.state.users.filter(person => {\r\n                    // merge data together, then see if user input is anywhere inside\r\n                    let values = Object.values(person)\r\n                      .join(\"\")\r\n                      .toLowerCase();\r\n                    return values.indexOf(filter.toLowerCase()) !== -1;\r\n                });\r\n                this.setState({ filteredUsers: filteredList });\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    // Takes Data called from the RandomUser API and pushes it to an Array of Objects to be displayed.\r\n    // This process of creating instances and DOM nodes corresponding to React components, and inserting them into the DOM, is called mounting.\r\n    // Note that normally you'd only call ReactDOM.render() to mount the root component(s). You don't need to manually \"mount\" the child components. Every time a parent component calls setState(), and its render method says a particular child should be rendered for the first time, React will automatically \"mount\" this child into its parent.\r\n    // Source: https://stackoverflow.com/questions/31556450/what-is-mounting-in-react-js\r\n    componentDidMount() {\r\n        API.callUsers()\r\n            .then(randomUsers => {\r\n                this.setState({\r\n                    users: randomUsers.data.results,\r\n                    filteredUsers: randomUsers.data.results\r\n                })\r\n            })\r\n    };\r\n\r\n    // Renders the components into a JSX Element\r\n    render() { \r\n        return (  \r\n            \r\n            <div>\r\n                <NavBar \r\n                    searchEmployees={this.state.searchEmployees} \r\n                />\r\n                <Table\r\n                    headings={this.state.headings}\r\n                    filteredUsers={this.state.filteredUsers}\r\n                />\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n \r\nexport default Data;","import React, { Component } from 'react';\r\nimport Data from \"./Data\";\r\n\r\nclass Body extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <Data />\r\n         );\r\n    }\r\n}\r\n \r\nexport default Body;","import React from \"react\";\r\n\r\nfunction Wrapper({ children }) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n          { children }\r\n        </div>\r\n    );\r\n  }\r\n \r\nexport default Wrapper;","import React, { Component } from 'react';\r\n\r\nclass Heading extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <h1>Employee Directory</h1>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Heading;","import React, { Component } from 'react';\nimport Body from \"./components/Body\";\nimport Wrapper from  \"./components/Wrapper\";\nimport Heading from \"./components/Heading\"\n\n\nclass App extends Component {\n  state = {  }\n  render() { \n    return (  \n\n      <div>\n        <Wrapper>\n          <Heading />\n          <Body />\n        </Wrapper>\n      </div>\n    );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}